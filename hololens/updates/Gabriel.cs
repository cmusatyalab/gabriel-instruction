// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gabriel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gabriel {

  /// <summary>Holder for reflection information generated from gabriel.proto</summary>
  public static partial class GabrielReflection {

    #region Descriptor
    /// <summary>File descriptor for gabriel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GabrielReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1nYWJyaWVsLnByb3RvEgdnYWJyaWVsGhlnb29nbGUvcHJvdG9idWYvYW55",
            "LnByb3RvIp0BCgpGcm9tQ2xpZW50EhAKCGZyYW1lX2lkGAEgASgDEioKDHBh",
            "eWxvYWRfdHlwZRgCIAEoDjIULmdhYnJpZWwuUGF5bG9hZFR5cGUSEwoLZW5n",
            "aW5lX25hbWUYAyABKAkSDwoHcGF5bG9hZBgEIAEoDBIrCg1lbmdpbmVfZmll",
            "bGRzGAUgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueSK6AwoNUmVzdWx0V3Jh",
            "cHBlchIQCghmcmFtZV9pZBgBIAEoAxItCgZzdGF0dXMYAiABKA4yHS5nYWJy",
            "aWVsLlJlc3VsdFdyYXBwZXIuU3RhdHVzEi4KB3Jlc3VsdHMYAyADKAsyHS5n",
            "YWJyaWVsLlJlc3VsdFdyYXBwZXIuUmVzdWx0EisKDWVuZ2luZV9maWVsZHMY",
            "BCABKAsyFC5nb29nbGUucHJvdG9idWYuQW55GloKBlJlc3VsdBIqCgxwYXls",
            "b2FkX3R5cGUYASABKA4yFC5nYWJyaWVsLlBheWxvYWRUeXBlEhMKC2VuZ2lu",
            "ZV9uYW1lGAIgASgJEg8KB3BheWxvYWQYAyABKAwirgEKBlN0YXR1cxILCgdT",
            "VUNDRVNTEAASEwoPV0VMQ09NRV9NRVNTQUdFEAESFQoRVU5TUEVDSUZJRURf",
            "RVJST1IQAhIWChJXUk9OR19JTlBVVF9GT1JNQVQQAxIiCh5SRVFVRVNURURf",
            "RU5HSU5FX05PVF9BVkFJTEFCTEUQBBINCglOT19UT0tFTlMQBRIOCgpRVUVV",
            "RV9GVUxMEAYSEAoMRU5HSU5FX0VSUk9SEAciTgoIVG9DbGllbnQSLgoOcmVz",
            "dWx0X3dyYXBwZXIYASABKAsyFi5nYWJyaWVsLlJlc3VsdFdyYXBwZXISEgoK",
            "bnVtX3Rva2VucxgCIAEoBSKaAQoMVG9Gcm9tRW5naW5lEgwKBGhvc3QYASAB",
            "KAkSDAoEcG9ydBgCIAEoBRIqCgtmcm9tX2NsaWVudBgDIAEoCzITLmdhYnJp",
            "ZWwuRnJvbUNsaWVudEgAEjAKDnJlc3VsdF93cmFwcGVyGAQgASgLMhYuZ2Fi",
            "cmllbC5SZXN1bHRXcmFwcGVySABCEAoOY2xpZW50X21lc3NhZ2UqWgoLUGF5",
            "bG9hZFR5cGUSCQoFSU1BR0UQABIJCgVWSURFTxABEgkKBUFVRElPEAISEQoN",
            "QUNDRUxFUk9NRVRFUhADEggKBFRFWFQQBBINCglBTklNQVRJT04QBUIlChtl",
            "ZHUuY211LmNzLmdhYnJpZWwucHJvdG9jb2xCBlByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Gabriel.PayloadType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gabriel.FromClient), global::Gabriel.FromClient.Parser, new[]{ "FrameId", "PayloadType", "EngineName", "Payload", "EngineFields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gabriel.ResultWrapper), global::Gabriel.ResultWrapper.Parser, new[]{ "FrameId", "Status", "Results", "EngineFields" }, null, new[]{ typeof(global::Gabriel.ResultWrapper.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Gabriel.ResultWrapper.Types.Result), global::Gabriel.ResultWrapper.Types.Result.Parser, new[]{ "PayloadType", "EngineName", "Payload" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gabriel.ToClient), global::Gabriel.ToClient.Parser, new[]{ "ResultWrapper", "NumTokens" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gabriel.ToFromEngine), global::Gabriel.ToFromEngine.Parser, new[]{ "Host", "Port", "FromClient", "ResultWrapper" }, new[]{ "ClientMessage" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PayloadType {
    [pbr::OriginalName("IMAGE")] Image = 0,
    [pbr::OriginalName("VIDEO")] Video = 1,
    [pbr::OriginalName("AUDIO")] Audio = 2,
    [pbr::OriginalName("ACCELEROMETER")] Accelerometer = 3,
    [pbr::OriginalName("TEXT")] Text = 4,
    [pbr::OriginalName("ANIMATION")] Animation = 5,
  }

  #endregion

  #region Messages
  public sealed partial class FromClient : pb::IMessage<FromClient> {
    private static readonly pb::MessageParser<FromClient> _parser = new pb::MessageParser<FromClient>(() => new FromClient());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gabriel.GabrielReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromClient(FromClient other) : this() {
      frameId_ = other.frameId_;
      payloadType_ = other.payloadType_;
      engineName_ = other.engineName_;
      payload_ = other.payload_;
      EngineFields = other.engineFields_ != null ? other.EngineFields.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromClient Clone() {
      return new FromClient(this);
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private long frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    /// <summary>Field number for the "payload_type" field.</summary>
    public const int PayloadTypeFieldNumber = 2;
    private global::Gabriel.PayloadType payloadType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gabriel.PayloadType PayloadType {
      get { return payloadType_; }
      set {
        payloadType_ = value;
      }
    }

    /// <summary>Field number for the "engine_name" field.</summary>
    public const int EngineNameFieldNumber = 3;
    private string engineName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EngineName {
      get { return engineName_; }
      set {
        engineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 4;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "engine_fields" field.</summary>
    public const int EngineFieldsFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Any engineFields_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any EngineFields {
      get { return engineFields_; }
      set {
        engineFields_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameId != other.FrameId) return false;
      if (PayloadType != other.PayloadType) return false;
      if (EngineName != other.EngineName) return false;
      if (Payload != other.Payload) return false;
      if (!object.Equals(EngineFields, other.EngineFields)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameId != 0L) hash ^= FrameId.GetHashCode();
      if (PayloadType != 0) hash ^= PayloadType.GetHashCode();
      if (EngineName.Length != 0) hash ^= EngineName.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (engineFields_ != null) hash ^= EngineFields.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FrameId);
      }
      if (PayloadType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PayloadType);
      }
      if (EngineName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EngineName);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Payload);
      }
      if (engineFields_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EngineFields);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameId);
      }
      if (PayloadType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
      }
      if (EngineName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EngineName);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (engineFields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EngineFields);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromClient other) {
      if (other == null) {
        return;
      }
      if (other.FrameId != 0L) {
        FrameId = other.FrameId;
      }
      if (other.PayloadType != 0) {
        PayloadType = other.PayloadType;
      }
      if (other.EngineName.Length != 0) {
        EngineName = other.EngineName;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.engineFields_ != null) {
        if (engineFields_ == null) {
          engineFields_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        EngineFields.MergeFrom(other.EngineFields);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameId = input.ReadInt64();
            break;
          }
          case 16: {
            payloadType_ = (global::Gabriel.PayloadType) input.ReadEnum();
            break;
          }
          case 26: {
            EngineName = input.ReadString();
            break;
          }
          case 34: {
            Payload = input.ReadBytes();
            break;
          }
          case 42: {
            if (engineFields_ == null) {
              engineFields_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(engineFields_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResultWrapper : pb::IMessage<ResultWrapper> {
    private static readonly pb::MessageParser<ResultWrapper> _parser = new pb::MessageParser<ResultWrapper>(() => new ResultWrapper());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResultWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gabriel.GabrielReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultWrapper(ResultWrapper other) : this() {
      frameId_ = other.frameId_;
      status_ = other.status_;
      results_ = other.results_.Clone();
      EngineFields = other.engineFields_ != null ? other.EngineFields.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultWrapper Clone() {
      return new ResultWrapper(this);
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private long frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Gabriel.ResultWrapper.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gabriel.ResultWrapper.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Gabriel.ResultWrapper.Types.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(26, global::Gabriel.ResultWrapper.Types.Result.Parser);
    private readonly pbc::RepeatedField<global::Gabriel.ResultWrapper.Types.Result> results_ = new pbc::RepeatedField<global::Gabriel.ResultWrapper.Types.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gabriel.ResultWrapper.Types.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "engine_fields" field.</summary>
    public const int EngineFieldsFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Any engineFields_;
    /// <summary>
    ///  engine needs to be able to pass state back to client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any EngineFields {
      get { return engineFields_; }
      set {
        engineFields_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResultWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResultWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameId != other.FrameId) return false;
      if (Status != other.Status) return false;
      if(!results_.Equals(other.results_)) return false;
      if (!object.Equals(EngineFields, other.EngineFields)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameId != 0L) hash ^= FrameId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= results_.GetHashCode();
      if (engineFields_ != null) hash ^= EngineFields.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FrameId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (engineFields_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EngineFields);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (engineFields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EngineFields);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResultWrapper other) {
      if (other == null) {
        return;
      }
      if (other.FrameId != 0L) {
        FrameId = other.FrameId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      results_.Add(other.results_);
      if (other.engineFields_ != null) {
        if (engineFields_ == null) {
          engineFields_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        EngineFields.MergeFrom(other.EngineFields);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameId = input.ReadInt64();
            break;
          }
          case 16: {
            status_ = (global::Gabriel.ResultWrapper.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 34: {
            if (engineFields_ == null) {
              engineFields_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(engineFields_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ResultWrapper message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        [pbr::OriginalName("WELCOME_MESSAGE")] WelcomeMessage = 1,
        [pbr::OriginalName("UNSPECIFIED_ERROR")] UnspecifiedError = 2,
        [pbr::OriginalName("WRONG_INPUT_FORMAT")] WrongInputFormat = 3,
        [pbr::OriginalName("REQUESTED_ENGINE_NOT_AVAILABLE")] RequestedEngineNotAvailable = 4,
        [pbr::OriginalName("NO_TOKENS")] NoTokens = 5,
        [pbr::OriginalName("QUEUE_FULL")] QueueFull = 6,
        /// <summary>
        ///  errors that are not related to Gabriel but rather to the engine itself.
        /// </summary>
        [pbr::OriginalName("ENGINE_ERROR")] EngineError = 7,
      }

      public sealed partial class Result : pb::IMessage<Result> {
        private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Result> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Gabriel.ResultWrapper.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result(Result other) : this() {
          payloadType_ = other.payloadType_;
          engineName_ = other.engineName_;
          payload_ = other.payload_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result Clone() {
          return new Result(this);
        }

        /// <summary>Field number for the "payload_type" field.</summary>
        public const int PayloadTypeFieldNumber = 1;
        private global::Gabriel.PayloadType payloadType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Gabriel.PayloadType PayloadType {
          get { return payloadType_; }
          set {
            payloadType_ = value;
          }
        }

        /// <summary>Field number for the "engine_name" field.</summary>
        public const int EngineNameFieldNumber = 2;
        private string engineName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EngineName {
          get { return engineName_; }
          set {
            engineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "payload" field.</summary>
        public const int PayloadFieldNumber = 3;
        private pb::ByteString payload_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Payload {
          get { return payload_; }
          set {
            payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Result);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Result other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PayloadType != other.PayloadType) return false;
          if (EngineName != other.EngineName) return false;
          if (Payload != other.Payload) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PayloadType != 0) hash ^= PayloadType.GetHashCode();
          if (EngineName.Length != 0) hash ^= EngineName.GetHashCode();
          if (Payload.Length != 0) hash ^= Payload.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PayloadType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) PayloadType);
          }
          if (EngineName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EngineName);
          }
          if (Payload.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Payload);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PayloadType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
          }
          if (EngineName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EngineName);
          }
          if (Payload.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Result other) {
          if (other == null) {
            return;
          }
          if (other.PayloadType != 0) {
            PayloadType = other.PayloadType;
          }
          if (other.EngineName.Length != 0) {
            EngineName = other.EngineName;
          }
          if (other.Payload.Length != 0) {
            Payload = other.Payload;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                payloadType_ = (global::Gabriel.PayloadType) input.ReadEnum();
                break;
              }
              case 18: {
                EngineName = input.ReadString();
                break;
              }
              case 26: {
                Payload = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ToClient : pb::IMessage<ToClient> {
    private static readonly pb::MessageParser<ToClient> _parser = new pb::MessageParser<ToClient>(() => new ToClient());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gabriel.GabrielReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToClient(ToClient other) : this() {
      ResultWrapper = other.resultWrapper_ != null ? other.ResultWrapper.Clone() : null;
      numTokens_ = other.numTokens_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToClient Clone() {
      return new ToClient(this);
    }

    /// <summary>Field number for the "result_wrapper" field.</summary>
    public const int ResultWrapperFieldNumber = 1;
    private global::Gabriel.ResultWrapper resultWrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gabriel.ResultWrapper ResultWrapper {
      get { return resultWrapper_; }
      set {
        resultWrapper_ = value;
      }
    }

    /// <summary>Field number for the "num_tokens" field.</summary>
    public const int NumTokensFieldNumber = 2;
    private int numTokens_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumTokens {
      get { return numTokens_; }
      set {
        numTokens_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ResultWrapper, other.ResultWrapper)) return false;
      if (NumTokens != other.NumTokens) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultWrapper_ != null) hash ^= ResultWrapper.GetHashCode();
      if (NumTokens != 0) hash ^= NumTokens.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultWrapper_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ResultWrapper);
      }
      if (NumTokens != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumTokens);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultWrapper_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResultWrapper);
      }
      if (NumTokens != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTokens);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToClient other) {
      if (other == null) {
        return;
      }
      if (other.resultWrapper_ != null) {
        if (resultWrapper_ == null) {
          resultWrapper_ = new global::Gabriel.ResultWrapper();
        }
        ResultWrapper.MergeFrom(other.ResultWrapper);
      }
      if (other.NumTokens != 0) {
        NumTokens = other.NumTokens;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (resultWrapper_ == null) {
              resultWrapper_ = new global::Gabriel.ResultWrapper();
            }
            input.ReadMessage(resultWrapper_);
            break;
          }
          case 16: {
            NumTokens = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ToFromEngine : pb::IMessage<ToFromEngine> {
    private static readonly pb::MessageParser<ToFromEngine> _parser = new pb::MessageParser<ToFromEngine>(() => new ToFromEngine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToFromEngine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gabriel.GabrielReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToFromEngine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToFromEngine(ToFromEngine other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      switch (other.ClientMessageCase) {
        case ClientMessageOneofCase.FromClient:
          FromClient = other.FromClient.Clone();
          break;
        case ClientMessageOneofCase.ResultWrapper:
          ResultWrapper = other.ResultWrapper.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToFromEngine Clone() {
      return new ToFromEngine(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "from_client" field.</summary>
    public const int FromClientFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gabriel.FromClient FromClient {
      get { return clientMessageCase_ == ClientMessageOneofCase.FromClient ? (global::Gabriel.FromClient) clientMessage_ : null; }
      set {
        clientMessage_ = value;
        clientMessageCase_ = value == null ? ClientMessageOneofCase.None : ClientMessageOneofCase.FromClient;
      }
    }

    /// <summary>Field number for the "result_wrapper" field.</summary>
    public const int ResultWrapperFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gabriel.ResultWrapper ResultWrapper {
      get { return clientMessageCase_ == ClientMessageOneofCase.ResultWrapper ? (global::Gabriel.ResultWrapper) clientMessage_ : null; }
      set {
        clientMessage_ = value;
        clientMessageCase_ = value == null ? ClientMessageOneofCase.None : ClientMessageOneofCase.ResultWrapper;
      }
    }

    private object clientMessage_;
    /// <summary>Enum of possible cases for the "client_message" oneof.</summary>
    public enum ClientMessageOneofCase {
      None = 0,
      FromClient = 3,
      ResultWrapper = 4,
    }
    private ClientMessageOneofCase clientMessageCase_ = ClientMessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessageOneofCase ClientMessageCase {
      get { return clientMessageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientMessage() {
      clientMessageCase_ = ClientMessageOneofCase.None;
      clientMessage_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToFromEngine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToFromEngine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (!object.Equals(FromClient, other.FromClient)) return false;
      if (!object.Equals(ResultWrapper, other.ResultWrapper)) return false;
      if (ClientMessageCase != other.ClientMessageCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (clientMessageCase_ == ClientMessageOneofCase.FromClient) hash ^= FromClient.GetHashCode();
      if (clientMessageCase_ == ClientMessageOneofCase.ResultWrapper) hash ^= ResultWrapper.GetHashCode();
      hash ^= (int) clientMessageCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (clientMessageCase_ == ClientMessageOneofCase.FromClient) {
        output.WriteRawTag(26);
        output.WriteMessage(FromClient);
      }
      if (clientMessageCase_ == ClientMessageOneofCase.ResultWrapper) {
        output.WriteRawTag(34);
        output.WriteMessage(ResultWrapper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (clientMessageCase_ == ClientMessageOneofCase.FromClient) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromClient);
      }
      if (clientMessageCase_ == ClientMessageOneofCase.ResultWrapper) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResultWrapper);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToFromEngine other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      switch (other.ClientMessageCase) {
        case ClientMessageOneofCase.FromClient:
          FromClient = other.FromClient;
          break;
        case ClientMessageOneofCase.ResultWrapper:
          ResultWrapper = other.ResultWrapper;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            global::Gabriel.FromClient subBuilder = new global::Gabriel.FromClient();
            if (clientMessageCase_ == ClientMessageOneofCase.FromClient) {
              subBuilder.MergeFrom(FromClient);
            }
            input.ReadMessage(subBuilder);
            FromClient = subBuilder;
            break;
          }
          case 34: {
            global::Gabriel.ResultWrapper subBuilder = new global::Gabriel.ResultWrapper();
            if (clientMessageCase_ == ClientMessageOneofCase.ResultWrapper) {
              subBuilder.MergeFrom(ResultWrapper);
            }
            input.ReadMessage(subBuilder);
            ResultWrapper = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
