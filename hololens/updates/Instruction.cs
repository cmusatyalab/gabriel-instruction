// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instruction.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Instruction {

  /// <summary>Holder for reflection information generated from instruction.proto</summary>
  public static partial class InstructionReflection {

    #region Descriptor
    /// <summary>File descriptor for instruction.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InstructionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFpbnN0cnVjdGlvbi5wcm90bxILaW5zdHJ1Y3Rpb24i9gEKBElrZWESJgoF",
            "c3RhdGUYASABKA4yFy5pbnN0cnVjdGlvbi5Ja2VhLlN0YXRlEh4KFmZyYW1l",
            "c193aXRoX29uZV9idWNrbGUYAiABKAUSHwoXZnJhbWVzX3dpdGhfdHdvX2J1",
            "Y2tsZXMYAyABKAUihAEKBVN0YXRlEgkKBVNUQVJUEAASCwoHTk9USElORxAB",
            "EggKBEJBU0UQAhIICgRQSVBFEAMSCQoFU0hBREUQBBIKCgZCVUNLTEUQBRIQ",
            "CgxCTEFDS19DSVJDTEUQBhIOCgpTSEFERV9CQVNFEAcSCAoEQlVMQhAIEgwK",
            "CEJVTEJfVE9QEAki6QEKCFNhbmR3aWNoEioKBXN0YXRlGAEgASgOMhsuaW5z",
            "dHJ1Y3Rpb24uU2FuZHdpY2guU3RhdGUSDgoGaG9sb194GAIgASgBEg4KBmhv",
            "bG9feRgDIAEoARISCgpob2xvX2RlcHRoGAQgASgBIn0KBVN0YXRlEgkKBVNU",
            "QVJUEAASCwoHTk9USElORxABEgkKBUJSRUFEEAISBwoDSEFNEAMSCwoHTEVU",
            "VFVDRRAEEgwKCENVQ1VNQkVSEAUSCAoESEFMRhAGEgoKBlRPTUFUTxAHEg0K",
            "CUhBTV9XUk9ORxAIEggKBEZVTEwQCSJ7CgxFbmdpbmVGaWVsZHMSFAoMdXBk",
            "YXRlX2NvdW50GAEgASgDEiEKBGlrZWEYAiABKAsyES5pbnN0cnVjdGlvbi5J",
            "a2VhSAASKQoIc2FuZHdpY2gYAyABKAsyFS5pbnN0cnVjdGlvbi5TYW5kd2lj",
            "aEgAQgcKBXN0YXRlQigKHmVkdS5jbXUuY3MuZ2FicmllbC5pbnN0cnVjdGlv",
            "bkIGUHJvdG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Instruction.Ikea), global::Instruction.Ikea.Parser, new[]{ "State", "FramesWithOneBuckle", "FramesWithTwoBuckles" }, null, new[]{ typeof(global::Instruction.Ikea.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Instruction.Sandwich), global::Instruction.Sandwich.Parser, new[]{ "State", "HoloX", "HoloY", "HoloDepth" }, null, new[]{ typeof(global::Instruction.Sandwich.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Instruction.EngineFields), global::Instruction.EngineFields.Parser, new[]{ "UpdateCount", "Ikea", "Sandwich" }, new[]{ "State" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Wrap each enum in a message to allow duplicate value names
  /// </summary>
  public sealed partial class Ikea : pb::IMessage<Ikea> {
    private static readonly pb::MessageParser<Ikea> _parser = new pb::MessageParser<Ikea>(() => new Ikea());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ikea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Instruction.InstructionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ikea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ikea(Ikea other) : this() {
      state_ = other.state_;
      framesWithOneBuckle_ = other.framesWithOneBuckle_;
      framesWithTwoBuckles_ = other.framesWithTwoBuckles_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ikea Clone() {
      return new Ikea(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Instruction.Ikea.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Instruction.Ikea.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "frames_with_one_buckle" field.</summary>
    public const int FramesWithOneBuckleFieldNumber = 2;
    private int framesWithOneBuckle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesWithOneBuckle {
      get { return framesWithOneBuckle_; }
      set {
        framesWithOneBuckle_ = value;
      }
    }

    /// <summary>Field number for the "frames_with_two_buckles" field.</summary>
    public const int FramesWithTwoBucklesFieldNumber = 3;
    private int framesWithTwoBuckles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesWithTwoBuckles {
      get { return framesWithTwoBuckles_; }
      set {
        framesWithTwoBuckles_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ikea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ikea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (FramesWithOneBuckle != other.FramesWithOneBuckle) return false;
      if (FramesWithTwoBuckles != other.FramesWithTwoBuckles) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (FramesWithOneBuckle != 0) hash ^= FramesWithOneBuckle.GetHashCode();
      if (FramesWithTwoBuckles != 0) hash ^= FramesWithTwoBuckles.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (FramesWithOneBuckle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FramesWithOneBuckle);
      }
      if (FramesWithTwoBuckles != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesWithTwoBuckles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (FramesWithOneBuckle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesWithOneBuckle);
      }
      if (FramesWithTwoBuckles != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesWithTwoBuckles);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ikea other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.FramesWithOneBuckle != 0) {
        FramesWithOneBuckle = other.FramesWithOneBuckle;
      }
      if (other.FramesWithTwoBuckles != 0) {
        FramesWithTwoBuckles = other.FramesWithTwoBuckles;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Instruction.Ikea.Types.State) input.ReadEnum();
            break;
          }
          case 16: {
            FramesWithOneBuckle = input.ReadInt32();
            break;
          }
          case 24: {
            FramesWithTwoBuckles = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Ikea message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("START")] Start = 0,
        [pbr::OriginalName("NOTHING")] Nothing = 1,
        [pbr::OriginalName("BASE")] Base = 2,
        [pbr::OriginalName("PIPE")] Pipe = 3,
        [pbr::OriginalName("SHADE")] Shade = 4,
        [pbr::OriginalName("BUCKLE")] Buckle = 5,
        [pbr::OriginalName("BLACK_CIRCLE")] BlackCircle = 6,
        [pbr::OriginalName("SHADE_BASE")] ShadeBase = 7,
        [pbr::OriginalName("BULB")] Bulb = 8,
        [pbr::OriginalName("BULB_TOP")] BulbTop = 9,
      }

    }
    #endregion

  }

  public sealed partial class Sandwich : pb::IMessage<Sandwich> {
    private static readonly pb::MessageParser<Sandwich> _parser = new pb::MessageParser<Sandwich>(() => new Sandwich());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sandwich> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Instruction.InstructionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sandwich() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sandwich(Sandwich other) : this() {
      state_ = other.state_;
      holoX_ = other.holoX_;
      holoY_ = other.holoY_;
      holoDepth_ = other.holoDepth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sandwich Clone() {
      return new Sandwich(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Instruction.Sandwich.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Instruction.Sandwich.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "holo_x" field.</summary>
    public const int HoloXFieldNumber = 2;
    private double holoX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HoloX {
      get { return holoX_; }
      set {
        holoX_ = value;
      }
    }

    /// <summary>Field number for the "holo_y" field.</summary>
    public const int HoloYFieldNumber = 3;
    private double holoY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HoloY {
      get { return holoY_; }
      set {
        holoY_ = value;
      }
    }

    /// <summary>Field number for the "holo_depth" field.</summary>
    public const int HoloDepthFieldNumber = 4;
    private double holoDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HoloDepth {
      get { return holoDepth_; }
      set {
        holoDepth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sandwich);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sandwich other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (HoloX != other.HoloX) return false;
      if (HoloY != other.HoloY) return false;
      if (HoloDepth != other.HoloDepth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (HoloX != 0D) hash ^= HoloX.GetHashCode();
      if (HoloY != 0D) hash ^= HoloY.GetHashCode();
      if (HoloDepth != 0D) hash ^= HoloDepth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (HoloX != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(HoloX);
      }
      if (HoloY != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(HoloY);
      }
      if (HoloDepth != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(HoloDepth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (HoloX != 0D) {
        size += 1 + 8;
      }
      if (HoloY != 0D) {
        size += 1 + 8;
      }
      if (HoloDepth != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sandwich other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.HoloX != 0D) {
        HoloX = other.HoloX;
      }
      if (other.HoloY != 0D) {
        HoloY = other.HoloY;
      }
      if (other.HoloDepth != 0D) {
        HoloDepth = other.HoloDepth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Instruction.Sandwich.Types.State) input.ReadEnum();
            break;
          }
          case 17: {
            HoloX = input.ReadDouble();
            break;
          }
          case 25: {
            HoloY = input.ReadDouble();
            break;
          }
          case 33: {
            HoloDepth = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Sandwich message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("START")] Start = 0,
        [pbr::OriginalName("NOTHING")] Nothing = 1,
        [pbr::OriginalName("BREAD")] Bread = 2,
        [pbr::OriginalName("HAM")] Ham = 3,
        [pbr::OriginalName("LETTUCE")] Lettuce = 4,
        [pbr::OriginalName("CUCUMBER")] Cucumber = 5,
        [pbr::OriginalName("HALF")] Half = 6,
        [pbr::OriginalName("TOMATO")] Tomato = 7,
        [pbr::OriginalName("HAM_WRONG")] HamWrong = 8,
        [pbr::OriginalName("FULL")] Full = 9,
      }

    }
    #endregion

  }

  public sealed partial class EngineFields : pb::IMessage<EngineFields> {
    private static readonly pb::MessageParser<EngineFields> _parser = new pb::MessageParser<EngineFields>(() => new EngineFields());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EngineFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Instruction.InstructionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EngineFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EngineFields(EngineFields other) : this() {
      updateCount_ = other.updateCount_;
      switch (other.StateCase) {
        case StateOneofCase.Ikea:
          Ikea = other.Ikea.Clone();
          break;
        case StateOneofCase.Sandwich:
          Sandwich = other.Sandwich.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EngineFields Clone() {
      return new EngineFields(this);
    }

    /// <summary>Field number for the "update_count" field.</summary>
    public const int UpdateCountFieldNumber = 1;
    private long updateCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateCount {
      get { return updateCount_; }
      set {
        updateCount_ = value;
      }
    }

    /// <summary>Field number for the "ikea" field.</summary>
    public const int IkeaFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Instruction.Ikea Ikea {
      get { return stateCase_ == StateOneofCase.Ikea ? (global::Instruction.Ikea) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Ikea;
      }
    }

    /// <summary>Field number for the "sandwich" field.</summary>
    public const int SandwichFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Instruction.Sandwich Sandwich {
      get { return stateCase_ == StateOneofCase.Sandwich ? (global::Instruction.Sandwich) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Sandwich;
      }
    }

    private object state_;
    /// <summary>Enum of possible cases for the "state" oneof.</summary>
    public enum StateOneofCase {
      None = 0,
      Ikea = 2,
      Sandwich = 3,
    }
    private StateOneofCase stateCase_ = StateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateOneofCase StateCase {
      get { return stateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      stateCase_ = StateOneofCase.None;
      state_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EngineFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EngineFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpdateCount != other.UpdateCount) return false;
      if (!object.Equals(Ikea, other.Ikea)) return false;
      if (!object.Equals(Sandwich, other.Sandwich)) return false;
      if (StateCase != other.StateCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpdateCount != 0L) hash ^= UpdateCount.GetHashCode();
      if (stateCase_ == StateOneofCase.Ikea) hash ^= Ikea.GetHashCode();
      if (stateCase_ == StateOneofCase.Sandwich) hash ^= Sandwich.GetHashCode();
      hash ^= (int) stateCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpdateCount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UpdateCount);
      }
      if (stateCase_ == StateOneofCase.Ikea) {
        output.WriteRawTag(18);
        output.WriteMessage(Ikea);
      }
      if (stateCase_ == StateOneofCase.Sandwich) {
        output.WriteRawTag(26);
        output.WriteMessage(Sandwich);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpdateCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateCount);
      }
      if (stateCase_ == StateOneofCase.Ikea) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ikea);
      }
      if (stateCase_ == StateOneofCase.Sandwich) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sandwich);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EngineFields other) {
      if (other == null) {
        return;
      }
      if (other.UpdateCount != 0L) {
        UpdateCount = other.UpdateCount;
      }
      switch (other.StateCase) {
        case StateOneofCase.Ikea:
          Ikea = other.Ikea;
          break;
        case StateOneofCase.Sandwich:
          Sandwich = other.Sandwich;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UpdateCount = input.ReadInt64();
            break;
          }
          case 18: {
            global::Instruction.Ikea subBuilder = new global::Instruction.Ikea();
            if (stateCase_ == StateOneofCase.Ikea) {
              subBuilder.MergeFrom(Ikea);
            }
            input.ReadMessage(subBuilder);
            Ikea = subBuilder;
            break;
          }
          case 26: {
            global::Instruction.Sandwich subBuilder = new global::Instruction.Sandwich();
            if (stateCase_ == StateOneofCase.Sandwich) {
              subBuilder.MergeFrom(Sandwich);
            }
            input.ReadMessage(subBuilder);
            Sandwich = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
